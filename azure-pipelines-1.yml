# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# resources:
#   pipelines:
#   - pipeline: 'P'
#     source: 'PreReq'
#     project: epceylon

variables:
 Cluster: 'EmailSync'
 tag: 'v1.1'

steps:
- script: |
    git rev-parse -q --verify "refs/tags/$tag"
    echo 'Gitted'

- task: PowerShell@2
  displayName: 'Get Version'
  inputs:
    targetType: 'inline'
    script: |
      $tagCommit = (git rev-parse -q --verify "refs/tags/v1.1")
      $hasTag = $tagCommit.Length
      Write-Host $tagCommit
      Write-Host "##vso[task.setvariable variable=GitTag]$tag"
      $tagCommit = (git rev-parse -q --verify "refs/tags/$tag")
      $hasTag = $tagCommit.Length
      Write-Host "##vso[task.setvariable variable=IsTagged]$hasTag"
      Write-Host "Is Tagged: $hasTag"
      exit 0

#stages:
#- stage: 'Verification'
#  pool:
#    vmImage: 'ubuntu-latest'

  # variables:
  #   CulsterSuffixed: '$(Cluster)-Cluster'

  # jobs:
  # - deployment: 'VerifyVariables'
  #   environment: 'Dev'
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - template: 'azure-pipelines/include1.steps.yml'
  #           parameters:
  #             ProjectName: 'API.Uploads.NetSuite'
  #             BuildNumber: '20200310.1'
  #             Cluster: 'common-apis'

          # - script: |
          #     echo $(Cluster)
          #     echo $(CulsterSuffixed)
          #     cat > lambda-vars.py << EOL
          #     import sys

          #     proj = sys.argv[1]
          #     paths = proj.split(".")[1:]
          #     lambdaParts = []
              
          #     for p in paths:
          #         lambdaParts.append(p[0].lower() + p[1:])
                  
          #     lambdaName = "-".join(lambdaParts)
          #     print("##vso[task.setvariable variable=LambdaName]%s" %lambdaName)
          #     print("##vso[task.setvariable variable=TargetProject]%s" %proj)
          #     print(lambdaName)
          #     print(proj)
          #     EOL

          # - task: PythonScript@0
          #   inputs:
          #     scriptSource: 'filePath'
          #     scriptPath: 'lambda-vars.py'
          #     arguments: 'Lambda.EmailSync.Integrator.OrchestrationWebhook'

          # - script: |
          #     echo $(LambdaName)
          #     echo $(TargetProject)
          # - script: |
          #     echo $(resources.pipeline.P.pipelineID)
          #     echo $(resources.pipeline.P.runName)
          #     echo $(resources.pipeline.P.runID)
          #     echo $(Build.Reason)
          #     echo See https://aka.ms/yaml
          #     buildSource=$(Build.SourceBranch)
          #     echo Branch $(Build.SourceBranch)
          #     tag=${buildSource#*tags/}
          #     echo $tag
          #   displayName: 'Run a multi-line script'
